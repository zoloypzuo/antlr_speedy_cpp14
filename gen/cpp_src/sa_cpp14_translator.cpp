/*
 * This file was auto-generated by speedy-antlr-tool v1.4.0
 *  https://github.com/amykyta3/speedy-antlr-tool
 */

#include "sa_cpp14_translator.h"


SA_CPP14Translator::SA_CPP14Translator(speedy_antlr::Translator *translator) {
    this->translator = translator;
}

SA_CPP14Translator::~SA_CPP14Translator() {
    Py_XDECREF(TranslationUnitContext_cls);
    Py_XDECREF(PrimaryExpressionContext_cls);
    Py_XDECREF(IdExpressionContext_cls);
    Py_XDECREF(UnqualifiedIdContext_cls);
    Py_XDECREF(QualifiedIdContext_cls);
    Py_XDECREF(NestedNameSpecifierContext_cls);
    Py_XDECREF(LambdaExpressionContext_cls);
    Py_XDECREF(LambdaIntroducerContext_cls);
    Py_XDECREF(LambdaCaptureContext_cls);
    Py_XDECREF(CaptureDefaultContext_cls);
    Py_XDECREF(CaptureListContext_cls);
    Py_XDECREF(CaptureContext_cls);
    Py_XDECREF(SimpleCaptureContext_cls);
    Py_XDECREF(InitcaptureContext_cls);
    Py_XDECREF(LambdaDeclaratorContext_cls);
    Py_XDECREF(PostfixExpressionContext_cls);
    Py_XDECREF(TypeIdOfTheTypeIdContext_cls);
    Py_XDECREF(ExpressionListContext_cls);
    Py_XDECREF(PseudoDestructorNameContext_cls);
    Py_XDECREF(UnaryExpressionContext_cls);
    Py_XDECREF(UnaryOperatorContext_cls);
    Py_XDECREF(NewExpressionContext_cls);
    Py_XDECREF(NewPlacementContext_cls);
    Py_XDECREF(NewTypeIdContext_cls);
    Py_XDECREF(NewDeclaratorContext_cls);
    Py_XDECREF(NoPointerNewDeclaratorContext_cls);
    Py_XDECREF(NewInitializerContext_cls);
    Py_XDECREF(DeleteExpressionContext_cls);
    Py_XDECREF(NoExceptExpressionContext_cls);
    Py_XDECREF(CastExpressionContext_cls);
    Py_XDECREF(PointerMemberExpressionContext_cls);
    Py_XDECREF(MultiplicativeExpressionContext_cls);
    Py_XDECREF(AdditiveExpressionContext_cls);
    Py_XDECREF(ShiftExpressionContext_cls);
    Py_XDECREF(ShiftOperatorContext_cls);
    Py_XDECREF(RelationalExpressionContext_cls);
    Py_XDECREF(EqualityExpressionContext_cls);
    Py_XDECREF(AndExpressionContext_cls);
    Py_XDECREF(ExclusiveOrExpressionContext_cls);
    Py_XDECREF(InclusiveOrExpressionContext_cls);
    Py_XDECREF(LogicalAndExpressionContext_cls);
    Py_XDECREF(LogicalOrExpressionContext_cls);
    Py_XDECREF(ConditionalExpressionContext_cls);
    Py_XDECREF(AssignmentExpressionContext_cls);
    Py_XDECREF(AssignmentOperatorContext_cls);
    Py_XDECREF(ExpressionContext_cls);
    Py_XDECREF(ConstantExpressionContext_cls);
    Py_XDECREF(StatementContext_cls);
    Py_XDECREF(LabeledStatementContext_cls);
    Py_XDECREF(ExpressionStatementContext_cls);
    Py_XDECREF(CompoundStatementContext_cls);
    Py_XDECREF(StatementSeqContext_cls);
    Py_XDECREF(SelectionStatementContext_cls);
    Py_XDECREF(ConditionContext_cls);
    Py_XDECREF(IterationStatementContext_cls);
    Py_XDECREF(ForInitStatementContext_cls);
    Py_XDECREF(ForRangeDeclarationContext_cls);
    Py_XDECREF(ForRangeInitializerContext_cls);
    Py_XDECREF(JumpStatementContext_cls);
    Py_XDECREF(DeclarationStatementContext_cls);
    Py_XDECREF(DeclarationseqContext_cls);
    Py_XDECREF(DeclarationContext_cls);
    Py_XDECREF(BlockDeclarationContext_cls);
    Py_XDECREF(AliasDeclarationContext_cls);
    Py_XDECREF(SimpleDeclarationContext_cls);
    Py_XDECREF(StaticAssertDeclarationContext_cls);
    Py_XDECREF(EmptyDeclarationContext_cls);
    Py_XDECREF(AttributeDeclarationContext_cls);
    Py_XDECREF(DeclSpecifierContext_cls);
    Py_XDECREF(DeclSpecifierSeqContext_cls);
    Py_XDECREF(StorageClassSpecifierContext_cls);
    Py_XDECREF(FunctionSpecifierContext_cls);
    Py_XDECREF(TypedefNameContext_cls);
    Py_XDECREF(TypeSpecifierContext_cls);
    Py_XDECREF(TrailingTypeSpecifierContext_cls);
    Py_XDECREF(TypeSpecifierSeqContext_cls);
    Py_XDECREF(TrailingTypeSpecifierSeqContext_cls);
    Py_XDECREF(SimpleTypeLengthModifierContext_cls);
    Py_XDECREF(SimpleTypeSignednessModifierContext_cls);
    Py_XDECREF(SimpleTypeSpecifierContext_cls);
    Py_XDECREF(TheTypeNameContext_cls);
    Py_XDECREF(DecltypeSpecifierContext_cls);
    Py_XDECREF(ElaboratedTypeSpecifierContext_cls);
    Py_XDECREF(EnumNameContext_cls);
    Py_XDECREF(EnumSpecifierContext_cls);
    Py_XDECREF(EnumHeadContext_cls);
    Py_XDECREF(OpaqueEnumDeclarationContext_cls);
    Py_XDECREF(EnumkeyContext_cls);
    Py_XDECREF(EnumbaseContext_cls);
    Py_XDECREF(EnumeratorListContext_cls);
    Py_XDECREF(EnumeratorDefinitionContext_cls);
    Py_XDECREF(EnumeratorContext_cls);
    Py_XDECREF(NamespaceNameContext_cls);
    Py_XDECREF(OriginalNamespaceNameContext_cls);
    Py_XDECREF(NamespaceDefinitionContext_cls);
    Py_XDECREF(NamespaceAliasContext_cls);
    Py_XDECREF(NamespaceAliasDefinitionContext_cls);
    Py_XDECREF(QualifiednamespacespecifierContext_cls);
    Py_XDECREF(UsingDeclarationContext_cls);
    Py_XDECREF(UsingDirectiveContext_cls);
    Py_XDECREF(AsmDefinitionContext_cls);
    Py_XDECREF(LinkageSpecificationContext_cls);
    Py_XDECREF(AttributeSpecifierSeqContext_cls);
    Py_XDECREF(AttributeSpecifierContext_cls);
    Py_XDECREF(AlignmentspecifierContext_cls);
    Py_XDECREF(AttributeListContext_cls);
    Py_XDECREF(AttributeContext_cls);
    Py_XDECREF(AttributeNamespaceContext_cls);
    Py_XDECREF(AttributeArgumentClauseContext_cls);
    Py_XDECREF(BalancedTokenSeqContext_cls);
    Py_XDECREF(BalancedtokenContext_cls);
    Py_XDECREF(InitDeclaratorListContext_cls);
    Py_XDECREF(InitDeclaratorContext_cls);
    Py_XDECREF(DeclaratorContext_cls);
    Py_XDECREF(PointerDeclaratorContext_cls);
    Py_XDECREF(NoPointerDeclaratorContext_cls);
    Py_XDECREF(ParametersAndQualifiersContext_cls);
    Py_XDECREF(TrailingReturnTypeContext_cls);
    Py_XDECREF(PointerOperatorContext_cls);
    Py_XDECREF(CvqualifierseqContext_cls);
    Py_XDECREF(CvQualifierContext_cls);
    Py_XDECREF(RefqualifierContext_cls);
    Py_XDECREF(DeclaratoridContext_cls);
    Py_XDECREF(TheTypeIdContext_cls);
    Py_XDECREF(AbstractDeclaratorContext_cls);
    Py_XDECREF(PointerAbstractDeclaratorContext_cls);
    Py_XDECREF(NoPointerAbstractDeclaratorContext_cls);
    Py_XDECREF(AbstractPackDeclaratorContext_cls);
    Py_XDECREF(NoPointerAbstractPackDeclaratorContext_cls);
    Py_XDECREF(ParameterDeclarationClauseContext_cls);
    Py_XDECREF(ParameterDeclarationListContext_cls);
    Py_XDECREF(ParameterDeclarationContext_cls);
    Py_XDECREF(FunctionDefinitionContext_cls);
    Py_XDECREF(FunctionBodyContext_cls);
    Py_XDECREF(InitializerContext_cls);
    Py_XDECREF(BraceOrEqualInitializerContext_cls);
    Py_XDECREF(InitializerClauseContext_cls);
    Py_XDECREF(InitializerListContext_cls);
    Py_XDECREF(BracedInitListContext_cls);
    Py_XDECREF(ClassNameContext_cls);
    Py_XDECREF(ClassSpecifierContext_cls);
    Py_XDECREF(ClassHeadContext_cls);
    Py_XDECREF(ClassHeadNameContext_cls);
    Py_XDECREF(ClassVirtSpecifierContext_cls);
    Py_XDECREF(ClassKeyContext_cls);
    Py_XDECREF(MemberSpecificationContext_cls);
    Py_XDECREF(MemberdeclarationContext_cls);
    Py_XDECREF(MemberDeclaratorListContext_cls);
    Py_XDECREF(MemberDeclaratorContext_cls);
    Py_XDECREF(VirtualSpecifierSeqContext_cls);
    Py_XDECREF(VirtualSpecifierContext_cls);
    Py_XDECREF(PureSpecifierContext_cls);
    Py_XDECREF(BaseClauseContext_cls);
    Py_XDECREF(BaseSpecifierListContext_cls);
    Py_XDECREF(BaseSpecifierContext_cls);
    Py_XDECREF(ClassOrDeclTypeContext_cls);
    Py_XDECREF(BaseTypeSpecifierContext_cls);
    Py_XDECREF(AccessSpecifierContext_cls);
    Py_XDECREF(ConversionFunctionIdContext_cls);
    Py_XDECREF(ConversionTypeIdContext_cls);
    Py_XDECREF(ConversionDeclaratorContext_cls);
    Py_XDECREF(ConstructorInitializerContext_cls);
    Py_XDECREF(MemInitializerListContext_cls);
    Py_XDECREF(MemInitializerContext_cls);
    Py_XDECREF(MeminitializeridContext_cls);
    Py_XDECREF(OperatorFunctionIdContext_cls);
    Py_XDECREF(LiteralOperatorIdContext_cls);
    Py_XDECREF(TemplateDeclarationContext_cls);
    Py_XDECREF(TemplateparameterListContext_cls);
    Py_XDECREF(TemplateParameterContext_cls);
    Py_XDECREF(TypeParameterContext_cls);
    Py_XDECREF(SimpleTemplateIdContext_cls);
    Py_XDECREF(TemplateIdContext_cls);
    Py_XDECREF(TemplateNameContext_cls);
    Py_XDECREF(TemplateArgumentListContext_cls);
    Py_XDECREF(TemplateArgumentContext_cls);
    Py_XDECREF(TypeNameSpecifierContext_cls);
    Py_XDECREF(ExplicitInstantiationContext_cls);
    Py_XDECREF(ExplicitSpecializationContext_cls);
    Py_XDECREF(TryBlockContext_cls);
    Py_XDECREF(FunctionTryBlockContext_cls);
    Py_XDECREF(HandlerSeqContext_cls);
    Py_XDECREF(HandlerContext_cls);
    Py_XDECREF(ExceptionDeclarationContext_cls);
    Py_XDECREF(ThrowExpressionContext_cls);
    Py_XDECREF(ExceptionSpecificationContext_cls);
    Py_XDECREF(DynamicExceptionSpecificationContext_cls);
    Py_XDECREF(TypeIdListContext_cls);
    Py_XDECREF(NoeExceptSpecificationContext_cls);
    Py_XDECREF(TheOperatorContext_cls);
    Py_XDECREF(LiteralContext_cls);
}


antlrcpp::Any SA_CPP14Translator::visitTranslationUnit(CPP14Parser::TranslationUnitContext *ctx){
    if(!TranslationUnitContext_cls) TranslationUnitContext_cls = PyObject_GetAttrString(translator->parser_cls, "TranslationUnitContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TranslationUnitContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitPrimaryExpression(CPP14Parser::PrimaryExpressionContext *ctx){
    if(!PrimaryExpressionContext_cls) PrimaryExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "PrimaryExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PrimaryExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitIdExpression(CPP14Parser::IdExpressionContext *ctx){
    if(!IdExpressionContext_cls) IdExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "IdExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IdExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitUnqualifiedId(CPP14Parser::UnqualifiedIdContext *ctx){
    if(!UnqualifiedIdContext_cls) UnqualifiedIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "UnqualifiedIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, UnqualifiedIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitQualifiedId(CPP14Parser::QualifiedIdContext *ctx){
    if(!QualifiedIdContext_cls) QualifiedIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "QualifiedIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, QualifiedIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNestedNameSpecifier(CPP14Parser::NestedNameSpecifierContext *ctx){
    if(!NestedNameSpecifierContext_cls) NestedNameSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "NestedNameSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NestedNameSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitLambdaExpression(CPP14Parser::LambdaExpressionContext *ctx){
    if(!LambdaExpressionContext_cls) LambdaExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitLambdaIntroducer(CPP14Parser::LambdaIntroducerContext *ctx){
    if(!LambdaIntroducerContext_cls) LambdaIntroducerContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaIntroducerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaIntroducerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitLambdaCapture(CPP14Parser::LambdaCaptureContext *ctx){
    if(!LambdaCaptureContext_cls) LambdaCaptureContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaCaptureContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaCaptureContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitCaptureDefault(CPP14Parser::CaptureDefaultContext *ctx){
    if(!CaptureDefaultContext_cls) CaptureDefaultContext_cls = PyObject_GetAttrString(translator->parser_cls, "CaptureDefaultContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CaptureDefaultContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitCaptureList(CPP14Parser::CaptureListContext *ctx){
    if(!CaptureListContext_cls) CaptureListContext_cls = PyObject_GetAttrString(translator->parser_cls, "CaptureListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CaptureListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitCapture(CPP14Parser::CaptureContext *ctx){
    if(!CaptureContext_cls) CaptureContext_cls = PyObject_GetAttrString(translator->parser_cls, "CaptureContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CaptureContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitSimpleCapture(CPP14Parser::SimpleCaptureContext *ctx){
    if(!SimpleCaptureContext_cls) SimpleCaptureContext_cls = PyObject_GetAttrString(translator->parser_cls, "SimpleCaptureContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SimpleCaptureContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitInitcapture(CPP14Parser::InitcaptureContext *ctx){
    if(!InitcaptureContext_cls) InitcaptureContext_cls = PyObject_GetAttrString(translator->parser_cls, "InitcaptureContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InitcaptureContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitLambdaDeclarator(CPP14Parser::LambdaDeclaratorContext *ctx){
    if(!LambdaDeclaratorContext_cls) LambdaDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "LambdaDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LambdaDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitPostfixExpression(CPP14Parser::PostfixExpressionContext *ctx){
    if(!PostfixExpressionContext_cls) PostfixExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "PostfixExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PostfixExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTypeIdOfTheTypeId(CPP14Parser::TypeIdOfTheTypeIdContext *ctx){
    if(!TypeIdOfTheTypeIdContext_cls) TypeIdOfTheTypeIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeIdOfTheTypeIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeIdOfTheTypeIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitExpressionList(CPP14Parser::ExpressionListContext *ctx){
    if(!ExpressionListContext_cls) ExpressionListContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitPseudoDestructorName(CPP14Parser::PseudoDestructorNameContext *ctx){
    if(!PseudoDestructorNameContext_cls) PseudoDestructorNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "PseudoDestructorNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PseudoDestructorNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitUnaryExpression(CPP14Parser::UnaryExpressionContext *ctx){
    if(!UnaryExpressionContext_cls) UnaryExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "UnaryExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, UnaryExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitUnaryOperator(CPP14Parser::UnaryOperatorContext *ctx){
    if(!UnaryOperatorContext_cls) UnaryOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "UnaryOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, UnaryOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNewExpression(CPP14Parser::NewExpressionContext *ctx){
    if(!NewExpressionContext_cls) NewExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "NewExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NewExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNewPlacement(CPP14Parser::NewPlacementContext *ctx){
    if(!NewPlacementContext_cls) NewPlacementContext_cls = PyObject_GetAttrString(translator->parser_cls, "NewPlacementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NewPlacementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNewTypeId(CPP14Parser::NewTypeIdContext *ctx){
    if(!NewTypeIdContext_cls) NewTypeIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "NewTypeIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NewTypeIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNewDeclarator(CPP14Parser::NewDeclaratorContext *ctx){
    if(!NewDeclaratorContext_cls) NewDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "NewDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NewDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNoPointerNewDeclarator(CPP14Parser::NoPointerNewDeclaratorContext *ctx){
    if(!NoPointerNewDeclaratorContext_cls) NoPointerNewDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "NoPointerNewDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NoPointerNewDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNewInitializer(CPP14Parser::NewInitializerContext *ctx){
    if(!NewInitializerContext_cls) NewInitializerContext_cls = PyObject_GetAttrString(translator->parser_cls, "NewInitializerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NewInitializerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitDeleteExpression(CPP14Parser::DeleteExpressionContext *ctx){
    if(!DeleteExpressionContext_cls) DeleteExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeleteExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeleteExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNoExceptExpression(CPP14Parser::NoExceptExpressionContext *ctx){
    if(!NoExceptExpressionContext_cls) NoExceptExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "NoExceptExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NoExceptExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitCastExpression(CPP14Parser::CastExpressionContext *ctx){
    if(!CastExpressionContext_cls) CastExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "CastExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CastExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitPointerMemberExpression(CPP14Parser::PointerMemberExpressionContext *ctx){
    if(!PointerMemberExpressionContext_cls) PointerMemberExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "PointerMemberExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PointerMemberExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitMultiplicativeExpression(CPP14Parser::MultiplicativeExpressionContext *ctx){
    if(!MultiplicativeExpressionContext_cls) MultiplicativeExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "MultiplicativeExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MultiplicativeExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAdditiveExpression(CPP14Parser::AdditiveExpressionContext *ctx){
    if(!AdditiveExpressionContext_cls) AdditiveExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "AdditiveExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AdditiveExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitShiftExpression(CPP14Parser::ShiftExpressionContext *ctx){
    if(!ShiftExpressionContext_cls) ShiftExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ShiftExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ShiftExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitShiftOperator(CPP14Parser::ShiftOperatorContext *ctx){
    if(!ShiftOperatorContext_cls) ShiftOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "ShiftOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ShiftOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitRelationalExpression(CPP14Parser::RelationalExpressionContext *ctx){
    if(!RelationalExpressionContext_cls) RelationalExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "RelationalExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RelationalExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitEqualityExpression(CPP14Parser::EqualityExpressionContext *ctx){
    if(!EqualityExpressionContext_cls) EqualityExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "EqualityExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EqualityExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAndExpression(CPP14Parser::AndExpressionContext *ctx){
    if(!AndExpressionContext_cls) AndExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "AndExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AndExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitExclusiveOrExpression(CPP14Parser::ExclusiveOrExpressionContext *ctx){
    if(!ExclusiveOrExpressionContext_cls) ExclusiveOrExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExclusiveOrExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExclusiveOrExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitInclusiveOrExpression(CPP14Parser::InclusiveOrExpressionContext *ctx){
    if(!InclusiveOrExpressionContext_cls) InclusiveOrExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "InclusiveOrExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InclusiveOrExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitLogicalAndExpression(CPP14Parser::LogicalAndExpressionContext *ctx){
    if(!LogicalAndExpressionContext_cls) LogicalAndExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "LogicalAndExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LogicalAndExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitLogicalOrExpression(CPP14Parser::LogicalOrExpressionContext *ctx){
    if(!LogicalOrExpressionContext_cls) LogicalOrExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "LogicalOrExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LogicalOrExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitConditionalExpression(CPP14Parser::ConditionalExpressionContext *ctx){
    if(!ConditionalExpressionContext_cls) ConditionalExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConditionalExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConditionalExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAssignmentExpression(CPP14Parser::AssignmentExpressionContext *ctx){
    if(!AssignmentExpressionContext_cls) AssignmentExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "AssignmentExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AssignmentExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAssignmentOperator(CPP14Parser::AssignmentOperatorContext *ctx){
    if(!AssignmentOperatorContext_cls) AssignmentOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "AssignmentOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AssignmentOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitExpression(CPP14Parser::ExpressionContext *ctx){
    if(!ExpressionContext_cls) ExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitConstantExpression(CPP14Parser::ConstantExpressionContext *ctx){
    if(!ConstantExpressionContext_cls) ConstantExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConstantExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConstantExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitStatement(CPP14Parser::StatementContext *ctx){
    if(!StatementContext_cls) StatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "StatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitLabeledStatement(CPP14Parser::LabeledStatementContext *ctx){
    if(!LabeledStatementContext_cls) LabeledStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "LabeledStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LabeledStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitExpressionStatement(CPP14Parser::ExpressionStatementContext *ctx){
    if(!ExpressionStatementContext_cls) ExpressionStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExpressionStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExpressionStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitCompoundStatement(CPP14Parser::CompoundStatementContext *ctx){
    if(!CompoundStatementContext_cls) CompoundStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "CompoundStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CompoundStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitStatementSeq(CPP14Parser::StatementSeqContext *ctx){
    if(!StatementSeqContext_cls) StatementSeqContext_cls = PyObject_GetAttrString(translator->parser_cls, "StatementSeqContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StatementSeqContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitSelectionStatement(CPP14Parser::SelectionStatementContext *ctx){
    if(!SelectionStatementContext_cls) SelectionStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "SelectionStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SelectionStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitCondition(CPP14Parser::ConditionContext *ctx){
    if(!ConditionContext_cls) ConditionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConditionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConditionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitIterationStatement(CPP14Parser::IterationStatementContext *ctx){
    if(!IterationStatementContext_cls) IterationStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "IterationStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, IterationStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitForInitStatement(CPP14Parser::ForInitStatementContext *ctx){
    if(!ForInitStatementContext_cls) ForInitStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "ForInitStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ForInitStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitForRangeDeclaration(CPP14Parser::ForRangeDeclarationContext *ctx){
    if(!ForRangeDeclarationContext_cls) ForRangeDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ForRangeDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ForRangeDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitForRangeInitializer(CPP14Parser::ForRangeInitializerContext *ctx){
    if(!ForRangeInitializerContext_cls) ForRangeInitializerContext_cls = PyObject_GetAttrString(translator->parser_cls, "ForRangeInitializerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ForRangeInitializerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitJumpStatement(CPP14Parser::JumpStatementContext *ctx){
    if(!JumpStatementContext_cls) JumpStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "JumpStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, JumpStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitDeclarationStatement(CPP14Parser::DeclarationStatementContext *ctx){
    if(!DeclarationStatementContext_cls) DeclarationStatementContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeclarationStatementContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeclarationStatementContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitDeclarationseq(CPP14Parser::DeclarationseqContext *ctx){
    if(!DeclarationseqContext_cls) DeclarationseqContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeclarationseqContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeclarationseqContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitDeclaration(CPP14Parser::DeclarationContext *ctx){
    if(!DeclarationContext_cls) DeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitBlockDeclaration(CPP14Parser::BlockDeclarationContext *ctx){
    if(!BlockDeclarationContext_cls) BlockDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "BlockDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BlockDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAliasDeclaration(CPP14Parser::AliasDeclarationContext *ctx){
    if(!AliasDeclarationContext_cls) AliasDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AliasDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AliasDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitSimpleDeclaration(CPP14Parser::SimpleDeclarationContext *ctx){
    if(!SimpleDeclarationContext_cls) SimpleDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "SimpleDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SimpleDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitStaticAssertDeclaration(CPP14Parser::StaticAssertDeclarationContext *ctx){
    if(!StaticAssertDeclarationContext_cls) StaticAssertDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "StaticAssertDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StaticAssertDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitEmptyDeclaration(CPP14Parser::EmptyDeclarationContext *ctx){
    if(!EmptyDeclarationContext_cls) EmptyDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "EmptyDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EmptyDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAttributeDeclaration(CPP14Parser::AttributeDeclarationContext *ctx){
    if(!AttributeDeclarationContext_cls) AttributeDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "AttributeDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AttributeDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitDeclSpecifier(CPP14Parser::DeclSpecifierContext *ctx){
    if(!DeclSpecifierContext_cls) DeclSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeclSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeclSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitDeclSpecifierSeq(CPP14Parser::DeclSpecifierSeqContext *ctx){
    if(!DeclSpecifierSeqContext_cls) DeclSpecifierSeqContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeclSpecifierSeqContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeclSpecifierSeqContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitStorageClassSpecifier(CPP14Parser::StorageClassSpecifierContext *ctx){
    if(!StorageClassSpecifierContext_cls) StorageClassSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "StorageClassSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, StorageClassSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitFunctionSpecifier(CPP14Parser::FunctionSpecifierContext *ctx){
    if(!FunctionSpecifierContext_cls) FunctionSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTypedefName(CPP14Parser::TypedefNameContext *ctx){
    if(!TypedefNameContext_cls) TypedefNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypedefNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypedefNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTypeSpecifier(CPP14Parser::TypeSpecifierContext *ctx){
    if(!TypeSpecifierContext_cls) TypeSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTrailingTypeSpecifier(CPP14Parser::TrailingTypeSpecifierContext *ctx){
    if(!TrailingTypeSpecifierContext_cls) TrailingTypeSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "TrailingTypeSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TrailingTypeSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTypeSpecifierSeq(CPP14Parser::TypeSpecifierSeqContext *ctx){
    if(!TypeSpecifierSeqContext_cls) TypeSpecifierSeqContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeSpecifierSeqContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeSpecifierSeqContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTrailingTypeSpecifierSeq(CPP14Parser::TrailingTypeSpecifierSeqContext *ctx){
    if(!TrailingTypeSpecifierSeqContext_cls) TrailingTypeSpecifierSeqContext_cls = PyObject_GetAttrString(translator->parser_cls, "TrailingTypeSpecifierSeqContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TrailingTypeSpecifierSeqContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitSimpleTypeLengthModifier(CPP14Parser::SimpleTypeLengthModifierContext *ctx){
    if(!SimpleTypeLengthModifierContext_cls) SimpleTypeLengthModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "SimpleTypeLengthModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SimpleTypeLengthModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitSimpleTypeSignednessModifier(CPP14Parser::SimpleTypeSignednessModifierContext *ctx){
    if(!SimpleTypeSignednessModifierContext_cls) SimpleTypeSignednessModifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "SimpleTypeSignednessModifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SimpleTypeSignednessModifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitSimpleTypeSpecifier(CPP14Parser::SimpleTypeSpecifierContext *ctx){
    if(!SimpleTypeSpecifierContext_cls) SimpleTypeSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "SimpleTypeSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SimpleTypeSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTheTypeName(CPP14Parser::TheTypeNameContext *ctx){
    if(!TheTypeNameContext_cls) TheTypeNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "TheTypeNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TheTypeNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitDecltypeSpecifier(CPP14Parser::DecltypeSpecifierContext *ctx){
    if(!DecltypeSpecifierContext_cls) DecltypeSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "DecltypeSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DecltypeSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitElaboratedTypeSpecifier(CPP14Parser::ElaboratedTypeSpecifierContext *ctx){
    if(!ElaboratedTypeSpecifierContext_cls) ElaboratedTypeSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ElaboratedTypeSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ElaboratedTypeSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitEnumName(CPP14Parser::EnumNameContext *ctx){
    if(!EnumNameContext_cls) EnumNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitEnumSpecifier(CPP14Parser::EnumSpecifierContext *ctx){
    if(!EnumSpecifierContext_cls) EnumSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitEnumHead(CPP14Parser::EnumHeadContext *ctx){
    if(!EnumHeadContext_cls) EnumHeadContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumHeadContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumHeadContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitOpaqueEnumDeclaration(CPP14Parser::OpaqueEnumDeclarationContext *ctx){
    if(!OpaqueEnumDeclarationContext_cls) OpaqueEnumDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "OpaqueEnumDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, OpaqueEnumDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitEnumkey(CPP14Parser::EnumkeyContext *ctx){
    if(!EnumkeyContext_cls) EnumkeyContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumkeyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumkeyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitEnumbase(CPP14Parser::EnumbaseContext *ctx){
    if(!EnumbaseContext_cls) EnumbaseContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumbaseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumbaseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitEnumeratorList(CPP14Parser::EnumeratorListContext *ctx){
    if(!EnumeratorListContext_cls) EnumeratorListContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumeratorListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumeratorListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitEnumeratorDefinition(CPP14Parser::EnumeratorDefinitionContext *ctx){
    if(!EnumeratorDefinitionContext_cls) EnumeratorDefinitionContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumeratorDefinitionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumeratorDefinitionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitEnumerator(CPP14Parser::EnumeratorContext *ctx){
    if(!EnumeratorContext_cls) EnumeratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "EnumeratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, EnumeratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNamespaceName(CPP14Parser::NamespaceNameContext *ctx){
    if(!NamespaceNameContext_cls) NamespaceNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "NamespaceNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NamespaceNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitOriginalNamespaceName(CPP14Parser::OriginalNamespaceNameContext *ctx){
    if(!OriginalNamespaceNameContext_cls) OriginalNamespaceNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "OriginalNamespaceNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, OriginalNamespaceNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNamespaceDefinition(CPP14Parser::NamespaceDefinitionContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"namespaceBody", static_cast<void*>(ctx->namespaceBody)}
    };
    if(!NamespaceDefinitionContext_cls) NamespaceDefinitionContext_cls = PyObject_GetAttrString(translator->parser_cls, "NamespaceDefinitionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NamespaceDefinitionContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNamespaceAlias(CPP14Parser::NamespaceAliasContext *ctx){
    if(!NamespaceAliasContext_cls) NamespaceAliasContext_cls = PyObject_GetAttrString(translator->parser_cls, "NamespaceAliasContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NamespaceAliasContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNamespaceAliasDefinition(CPP14Parser::NamespaceAliasDefinitionContext *ctx){
    if(!NamespaceAliasDefinitionContext_cls) NamespaceAliasDefinitionContext_cls = PyObject_GetAttrString(translator->parser_cls, "NamespaceAliasDefinitionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NamespaceAliasDefinitionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitQualifiednamespacespecifier(CPP14Parser::QualifiednamespacespecifierContext *ctx){
    if(!QualifiednamespacespecifierContext_cls) QualifiednamespacespecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "QualifiednamespacespecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, QualifiednamespacespecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitUsingDeclaration(CPP14Parser::UsingDeclarationContext *ctx){
    if(!UsingDeclarationContext_cls) UsingDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "UsingDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, UsingDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitUsingDirective(CPP14Parser::UsingDirectiveContext *ctx){
    if(!UsingDirectiveContext_cls) UsingDirectiveContext_cls = PyObject_GetAttrString(translator->parser_cls, "UsingDirectiveContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, UsingDirectiveContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAsmDefinition(CPP14Parser::AsmDefinitionContext *ctx){
    if(!AsmDefinitionContext_cls) AsmDefinitionContext_cls = PyObject_GetAttrString(translator->parser_cls, "AsmDefinitionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AsmDefinitionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitLinkageSpecification(CPP14Parser::LinkageSpecificationContext *ctx){
    if(!LinkageSpecificationContext_cls) LinkageSpecificationContext_cls = PyObject_GetAttrString(translator->parser_cls, "LinkageSpecificationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LinkageSpecificationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAttributeSpecifierSeq(CPP14Parser::AttributeSpecifierSeqContext *ctx){
    if(!AttributeSpecifierSeqContext_cls) AttributeSpecifierSeqContext_cls = PyObject_GetAttrString(translator->parser_cls, "AttributeSpecifierSeqContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AttributeSpecifierSeqContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAttributeSpecifier(CPP14Parser::AttributeSpecifierContext *ctx){
    if(!AttributeSpecifierContext_cls) AttributeSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "AttributeSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AttributeSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAlignmentspecifier(CPP14Parser::AlignmentspecifierContext *ctx){
    if(!AlignmentspecifierContext_cls) AlignmentspecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "AlignmentspecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AlignmentspecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAttributeList(CPP14Parser::AttributeListContext *ctx){
    if(!AttributeListContext_cls) AttributeListContext_cls = PyObject_GetAttrString(translator->parser_cls, "AttributeListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AttributeListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAttribute(CPP14Parser::AttributeContext *ctx){
    if(!AttributeContext_cls) AttributeContext_cls = PyObject_GetAttrString(translator->parser_cls, "AttributeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AttributeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAttributeNamespace(CPP14Parser::AttributeNamespaceContext *ctx){
    if(!AttributeNamespaceContext_cls) AttributeNamespaceContext_cls = PyObject_GetAttrString(translator->parser_cls, "AttributeNamespaceContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AttributeNamespaceContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAttributeArgumentClause(CPP14Parser::AttributeArgumentClauseContext *ctx){
    if(!AttributeArgumentClauseContext_cls) AttributeArgumentClauseContext_cls = PyObject_GetAttrString(translator->parser_cls, "AttributeArgumentClauseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AttributeArgumentClauseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitBalancedTokenSeq(CPP14Parser::BalancedTokenSeqContext *ctx){
    if(!BalancedTokenSeqContext_cls) BalancedTokenSeqContext_cls = PyObject_GetAttrString(translator->parser_cls, "BalancedTokenSeqContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BalancedTokenSeqContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitBalancedtoken(CPP14Parser::BalancedtokenContext *ctx){
    if(!BalancedtokenContext_cls) BalancedtokenContext_cls = PyObject_GetAttrString(translator->parser_cls, "BalancedtokenContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BalancedtokenContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitInitDeclaratorList(CPP14Parser::InitDeclaratorListContext *ctx){
    if(!InitDeclaratorListContext_cls) InitDeclaratorListContext_cls = PyObject_GetAttrString(translator->parser_cls, "InitDeclaratorListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InitDeclaratorListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitInitDeclarator(CPP14Parser::InitDeclaratorContext *ctx){
    if(!InitDeclaratorContext_cls) InitDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "InitDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InitDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitDeclarator(CPP14Parser::DeclaratorContext *ctx){
    if(!DeclaratorContext_cls) DeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitPointerDeclarator(CPP14Parser::PointerDeclaratorContext *ctx){
    if(!PointerDeclaratorContext_cls) PointerDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "PointerDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PointerDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNoPointerDeclarator(CPP14Parser::NoPointerDeclaratorContext *ctx){
    if(!NoPointerDeclaratorContext_cls) NoPointerDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "NoPointerDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NoPointerDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitParametersAndQualifiers(CPP14Parser::ParametersAndQualifiersContext *ctx){
    if(!ParametersAndQualifiersContext_cls) ParametersAndQualifiersContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParametersAndQualifiersContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParametersAndQualifiersContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTrailingReturnType(CPP14Parser::TrailingReturnTypeContext *ctx){
    if(!TrailingReturnTypeContext_cls) TrailingReturnTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "TrailingReturnTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TrailingReturnTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitPointerOperator(CPP14Parser::PointerOperatorContext *ctx){
    if(!PointerOperatorContext_cls) PointerOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "PointerOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PointerOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitCvqualifierseq(CPP14Parser::CvqualifierseqContext *ctx){
    if(!CvqualifierseqContext_cls) CvqualifierseqContext_cls = PyObject_GetAttrString(translator->parser_cls, "CvqualifierseqContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CvqualifierseqContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitCvQualifier(CPP14Parser::CvQualifierContext *ctx){
    if(!CvQualifierContext_cls) CvQualifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "CvQualifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, CvQualifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitRefqualifier(CPP14Parser::RefqualifierContext *ctx){
    if(!RefqualifierContext_cls) RefqualifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "RefqualifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, RefqualifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitDeclaratorid(CPP14Parser::DeclaratoridContext *ctx){
    if(!DeclaratoridContext_cls) DeclaratoridContext_cls = PyObject_GetAttrString(translator->parser_cls, "DeclaratoridContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DeclaratoridContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTheTypeId(CPP14Parser::TheTypeIdContext *ctx){
    if(!TheTypeIdContext_cls) TheTypeIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "TheTypeIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TheTypeIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAbstractDeclarator(CPP14Parser::AbstractDeclaratorContext *ctx){
    if(!AbstractDeclaratorContext_cls) AbstractDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "AbstractDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AbstractDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitPointerAbstractDeclarator(CPP14Parser::PointerAbstractDeclaratorContext *ctx){
    if(!PointerAbstractDeclaratorContext_cls) PointerAbstractDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "PointerAbstractDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PointerAbstractDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNoPointerAbstractDeclarator(CPP14Parser::NoPointerAbstractDeclaratorContext *ctx){
    if(!NoPointerAbstractDeclaratorContext_cls) NoPointerAbstractDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "NoPointerAbstractDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NoPointerAbstractDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAbstractPackDeclarator(CPP14Parser::AbstractPackDeclaratorContext *ctx){
    if(!AbstractPackDeclaratorContext_cls) AbstractPackDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "AbstractPackDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AbstractPackDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNoPointerAbstractPackDeclarator(CPP14Parser::NoPointerAbstractPackDeclaratorContext *ctx){
    if(!NoPointerAbstractPackDeclaratorContext_cls) NoPointerAbstractPackDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "NoPointerAbstractPackDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NoPointerAbstractPackDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitParameterDeclarationClause(CPP14Parser::ParameterDeclarationClauseContext *ctx){
    if(!ParameterDeclarationClauseContext_cls) ParameterDeclarationClauseContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParameterDeclarationClauseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParameterDeclarationClauseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitParameterDeclarationList(CPP14Parser::ParameterDeclarationListContext *ctx){
    if(!ParameterDeclarationListContext_cls) ParameterDeclarationListContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParameterDeclarationListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParameterDeclarationListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitParameterDeclaration(CPP14Parser::ParameterDeclarationContext *ctx){
    if(!ParameterDeclarationContext_cls) ParameterDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ParameterDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ParameterDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitFunctionDefinition(CPP14Parser::FunctionDefinitionContext *ctx){
    if(!FunctionDefinitionContext_cls) FunctionDefinitionContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionDefinitionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionDefinitionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitFunctionBody(CPP14Parser::FunctionBodyContext *ctx){
    if(!FunctionBodyContext_cls) FunctionBodyContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionBodyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionBodyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitInitializer(CPP14Parser::InitializerContext *ctx){
    if(!InitializerContext_cls) InitializerContext_cls = PyObject_GetAttrString(translator->parser_cls, "InitializerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InitializerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitBraceOrEqualInitializer(CPP14Parser::BraceOrEqualInitializerContext *ctx){
    if(!BraceOrEqualInitializerContext_cls) BraceOrEqualInitializerContext_cls = PyObject_GetAttrString(translator->parser_cls, "BraceOrEqualInitializerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BraceOrEqualInitializerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitInitializerClause(CPP14Parser::InitializerClauseContext *ctx){
    if(!InitializerClauseContext_cls) InitializerClauseContext_cls = PyObject_GetAttrString(translator->parser_cls, "InitializerClauseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InitializerClauseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitInitializerList(CPP14Parser::InitializerListContext *ctx){
    if(!InitializerListContext_cls) InitializerListContext_cls = PyObject_GetAttrString(translator->parser_cls, "InitializerListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, InitializerListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitBracedInitList(CPP14Parser::BracedInitListContext *ctx){
    if(!BracedInitListContext_cls) BracedInitListContext_cls = PyObject_GetAttrString(translator->parser_cls, "BracedInitListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BracedInitListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitClassName(CPP14Parser::ClassNameContext *ctx){
    if(!ClassNameContext_cls) ClassNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitClassSpecifier(CPP14Parser::ClassSpecifierContext *ctx){
    if(!ClassSpecifierContext_cls) ClassSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitClassHead(CPP14Parser::ClassHeadContext *ctx){
    if(!ClassHeadContext_cls) ClassHeadContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassHeadContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassHeadContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitClassHeadName(CPP14Parser::ClassHeadNameContext *ctx){
    if(!ClassHeadNameContext_cls) ClassHeadNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassHeadNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassHeadNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitClassVirtSpecifier(CPP14Parser::ClassVirtSpecifierContext *ctx){
    if(!ClassVirtSpecifierContext_cls) ClassVirtSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassVirtSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassVirtSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitClassKey(CPP14Parser::ClassKeyContext *ctx){
    if(!ClassKeyContext_cls) ClassKeyContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassKeyContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassKeyContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitMemberSpecification(CPP14Parser::MemberSpecificationContext *ctx){
    if(!MemberSpecificationContext_cls) MemberSpecificationContext_cls = PyObject_GetAttrString(translator->parser_cls, "MemberSpecificationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberSpecificationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitMemberdeclaration(CPP14Parser::MemberdeclarationContext *ctx){
    if(!MemberdeclarationContext_cls) MemberdeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "MemberdeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberdeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitMemberDeclaratorList(CPP14Parser::MemberDeclaratorListContext *ctx){
    if(!MemberDeclaratorListContext_cls) MemberDeclaratorListContext_cls = PyObject_GetAttrString(translator->parser_cls, "MemberDeclaratorListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberDeclaratorListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitMemberDeclarator(CPP14Parser::MemberDeclaratorContext *ctx){
    if(!MemberDeclaratorContext_cls) MemberDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "MemberDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemberDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitVirtualSpecifierSeq(CPP14Parser::VirtualSpecifierSeqContext *ctx){
    if(!VirtualSpecifierSeqContext_cls) VirtualSpecifierSeqContext_cls = PyObject_GetAttrString(translator->parser_cls, "VirtualSpecifierSeqContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VirtualSpecifierSeqContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitVirtualSpecifier(CPP14Parser::VirtualSpecifierContext *ctx){
    if(!VirtualSpecifierContext_cls) VirtualSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "VirtualSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, VirtualSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitPureSpecifier(CPP14Parser::PureSpecifierContext *ctx){
    speedy_antlr::LabelMap labels[] = {
        {"val", static_cast<void*>(ctx->val)}
    };
    if(!PureSpecifierContext_cls) PureSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "PureSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, PureSpecifierContext_cls, labels, 1);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitBaseClause(CPP14Parser::BaseClauseContext *ctx){
    if(!BaseClauseContext_cls) BaseClauseContext_cls = PyObject_GetAttrString(translator->parser_cls, "BaseClauseContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BaseClauseContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitBaseSpecifierList(CPP14Parser::BaseSpecifierListContext *ctx){
    if(!BaseSpecifierListContext_cls) BaseSpecifierListContext_cls = PyObject_GetAttrString(translator->parser_cls, "BaseSpecifierListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BaseSpecifierListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitBaseSpecifier(CPP14Parser::BaseSpecifierContext *ctx){
    if(!BaseSpecifierContext_cls) BaseSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "BaseSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BaseSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitClassOrDeclType(CPP14Parser::ClassOrDeclTypeContext *ctx){
    if(!ClassOrDeclTypeContext_cls) ClassOrDeclTypeContext_cls = PyObject_GetAttrString(translator->parser_cls, "ClassOrDeclTypeContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ClassOrDeclTypeContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitBaseTypeSpecifier(CPP14Parser::BaseTypeSpecifierContext *ctx){
    if(!BaseTypeSpecifierContext_cls) BaseTypeSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "BaseTypeSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, BaseTypeSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitAccessSpecifier(CPP14Parser::AccessSpecifierContext *ctx){
    if(!AccessSpecifierContext_cls) AccessSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "AccessSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, AccessSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitConversionFunctionId(CPP14Parser::ConversionFunctionIdContext *ctx){
    if(!ConversionFunctionIdContext_cls) ConversionFunctionIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConversionFunctionIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConversionFunctionIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitConversionTypeId(CPP14Parser::ConversionTypeIdContext *ctx){
    if(!ConversionTypeIdContext_cls) ConversionTypeIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConversionTypeIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConversionTypeIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitConversionDeclarator(CPP14Parser::ConversionDeclaratorContext *ctx){
    if(!ConversionDeclaratorContext_cls) ConversionDeclaratorContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConversionDeclaratorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConversionDeclaratorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitConstructorInitializer(CPP14Parser::ConstructorInitializerContext *ctx){
    if(!ConstructorInitializerContext_cls) ConstructorInitializerContext_cls = PyObject_GetAttrString(translator->parser_cls, "ConstructorInitializerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ConstructorInitializerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitMemInitializerList(CPP14Parser::MemInitializerListContext *ctx){
    if(!MemInitializerListContext_cls) MemInitializerListContext_cls = PyObject_GetAttrString(translator->parser_cls, "MemInitializerListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemInitializerListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitMemInitializer(CPP14Parser::MemInitializerContext *ctx){
    if(!MemInitializerContext_cls) MemInitializerContext_cls = PyObject_GetAttrString(translator->parser_cls, "MemInitializerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MemInitializerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitMeminitializerid(CPP14Parser::MeminitializeridContext *ctx){
    if(!MeminitializeridContext_cls) MeminitializeridContext_cls = PyObject_GetAttrString(translator->parser_cls, "MeminitializeridContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, MeminitializeridContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitOperatorFunctionId(CPP14Parser::OperatorFunctionIdContext *ctx){
    if(!OperatorFunctionIdContext_cls) OperatorFunctionIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "OperatorFunctionIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, OperatorFunctionIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitLiteralOperatorId(CPP14Parser::LiteralOperatorIdContext *ctx){
    if(!LiteralOperatorIdContext_cls) LiteralOperatorIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "LiteralOperatorIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LiteralOperatorIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTemplateDeclaration(CPP14Parser::TemplateDeclarationContext *ctx){
    if(!TemplateDeclarationContext_cls) TemplateDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "TemplateDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TemplateDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTemplateparameterList(CPP14Parser::TemplateparameterListContext *ctx){
    if(!TemplateparameterListContext_cls) TemplateparameterListContext_cls = PyObject_GetAttrString(translator->parser_cls, "TemplateparameterListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TemplateparameterListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTemplateParameter(CPP14Parser::TemplateParameterContext *ctx){
    if(!TemplateParameterContext_cls) TemplateParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "TemplateParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TemplateParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTypeParameter(CPP14Parser::TypeParameterContext *ctx){
    if(!TypeParameterContext_cls) TypeParameterContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeParameterContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeParameterContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitSimpleTemplateId(CPP14Parser::SimpleTemplateIdContext *ctx){
    if(!SimpleTemplateIdContext_cls) SimpleTemplateIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "SimpleTemplateIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, SimpleTemplateIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTemplateId(CPP14Parser::TemplateIdContext *ctx){
    if(!TemplateIdContext_cls) TemplateIdContext_cls = PyObject_GetAttrString(translator->parser_cls, "TemplateIdContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TemplateIdContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTemplateName(CPP14Parser::TemplateNameContext *ctx){
    if(!TemplateNameContext_cls) TemplateNameContext_cls = PyObject_GetAttrString(translator->parser_cls, "TemplateNameContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TemplateNameContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTemplateArgumentList(CPP14Parser::TemplateArgumentListContext *ctx){
    if(!TemplateArgumentListContext_cls) TemplateArgumentListContext_cls = PyObject_GetAttrString(translator->parser_cls, "TemplateArgumentListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TemplateArgumentListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTemplateArgument(CPP14Parser::TemplateArgumentContext *ctx){
    if(!TemplateArgumentContext_cls) TemplateArgumentContext_cls = PyObject_GetAttrString(translator->parser_cls, "TemplateArgumentContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TemplateArgumentContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTypeNameSpecifier(CPP14Parser::TypeNameSpecifierContext *ctx){
    if(!TypeNameSpecifierContext_cls) TypeNameSpecifierContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeNameSpecifierContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeNameSpecifierContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitExplicitInstantiation(CPP14Parser::ExplicitInstantiationContext *ctx){
    if(!ExplicitInstantiationContext_cls) ExplicitInstantiationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExplicitInstantiationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExplicitInstantiationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitExplicitSpecialization(CPP14Parser::ExplicitSpecializationContext *ctx){
    if(!ExplicitSpecializationContext_cls) ExplicitSpecializationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExplicitSpecializationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExplicitSpecializationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTryBlock(CPP14Parser::TryBlockContext *ctx){
    if(!TryBlockContext_cls) TryBlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "TryBlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TryBlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitFunctionTryBlock(CPP14Parser::FunctionTryBlockContext *ctx){
    if(!FunctionTryBlockContext_cls) FunctionTryBlockContext_cls = PyObject_GetAttrString(translator->parser_cls, "FunctionTryBlockContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, FunctionTryBlockContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitHandlerSeq(CPP14Parser::HandlerSeqContext *ctx){
    if(!HandlerSeqContext_cls) HandlerSeqContext_cls = PyObject_GetAttrString(translator->parser_cls, "HandlerSeqContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, HandlerSeqContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitHandler(CPP14Parser::HandlerContext *ctx){
    if(!HandlerContext_cls) HandlerContext_cls = PyObject_GetAttrString(translator->parser_cls, "HandlerContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, HandlerContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitExceptionDeclaration(CPP14Parser::ExceptionDeclarationContext *ctx){
    if(!ExceptionDeclarationContext_cls) ExceptionDeclarationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExceptionDeclarationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExceptionDeclarationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitThrowExpression(CPP14Parser::ThrowExpressionContext *ctx){
    if(!ThrowExpressionContext_cls) ThrowExpressionContext_cls = PyObject_GetAttrString(translator->parser_cls, "ThrowExpressionContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ThrowExpressionContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitExceptionSpecification(CPP14Parser::ExceptionSpecificationContext *ctx){
    if(!ExceptionSpecificationContext_cls) ExceptionSpecificationContext_cls = PyObject_GetAttrString(translator->parser_cls, "ExceptionSpecificationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, ExceptionSpecificationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitDynamicExceptionSpecification(CPP14Parser::DynamicExceptionSpecificationContext *ctx){
    if(!DynamicExceptionSpecificationContext_cls) DynamicExceptionSpecificationContext_cls = PyObject_GetAttrString(translator->parser_cls, "DynamicExceptionSpecificationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, DynamicExceptionSpecificationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTypeIdList(CPP14Parser::TypeIdListContext *ctx){
    if(!TypeIdListContext_cls) TypeIdListContext_cls = PyObject_GetAttrString(translator->parser_cls, "TypeIdListContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TypeIdListContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitNoeExceptSpecification(CPP14Parser::NoeExceptSpecificationContext *ctx){
    if(!NoeExceptSpecificationContext_cls) NoeExceptSpecificationContext_cls = PyObject_GetAttrString(translator->parser_cls, "NoeExceptSpecificationContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, NoeExceptSpecificationContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitTheOperator(CPP14Parser::TheOperatorContext *ctx){
    if(!TheOperatorContext_cls) TheOperatorContext_cls = PyObject_GetAttrString(translator->parser_cls, "TheOperatorContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, TheOperatorContext_cls);
    return py_ctx;
}

antlrcpp::Any SA_CPP14Translator::visitLiteral(CPP14Parser::LiteralContext *ctx){
    if(!LiteralContext_cls) LiteralContext_cls = PyObject_GetAttrString(translator->parser_cls, "LiteralContext");
    PyObject *py_ctx = translator->convert_ctx(this, ctx, LiteralContext_cls);
    return py_ctx;
}
